// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Add_Rectangle (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        src_data_stream_3_V_dout,
        src_data_stream_3_V_empty_n,
        src_data_stream_3_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n,
        dst_data_stream_3_V_write,
        xleft_dout,
        xleft_empty_n,
        xleft_read,
        xright_dout,
        xright_empty_n,
        xright_read,
        ytop_dout,
        ytop_empty_n,
        ytop_read,
        ydown_dout,
        ydown_empty_n,
        ydown_read,
        color1_dout,
        color1_empty_n,
        color1_read,
        color2_dout,
        color2_empty_n,
        color2_read,
        color3_dout,
        color3_empty_n,
        color3_read,
        xleft_out_din,
        xleft_out_full_n,
        xleft_out_write,
        ytop_out_din,
        ytop_out_full_n,
        ytop_out_write,
        color1_out_din,
        color1_out_full_n,
        color1_out_write,
        color2_out_din,
        color2_out_full_n,
        color2_out_write,
        color3_out_din,
        color3_out_full_n,
        color3_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
input  [7:0] src_data_stream_3_V_dout;
input   src_data_stream_3_V_empty_n;
output   src_data_stream_3_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
output  [7:0] dst_data_stream_3_V_din;
input   dst_data_stream_3_V_full_n;
output   dst_data_stream_3_V_write;
input  [15:0] xleft_dout;
input   xleft_empty_n;
output   xleft_read;
input  [15:0] xright_dout;
input   xright_empty_n;
output   xright_read;
input  [15:0] ytop_dout;
input   ytop_empty_n;
output   ytop_read;
input  [15:0] ydown_dout;
input   ydown_empty_n;
output   ydown_read;
input  [7:0] color1_dout;
input   color1_empty_n;
output   color1_read;
input  [7:0] color2_dout;
input   color2_empty_n;
output   color2_read;
input  [7:0] color3_dout;
input   color3_empty_n;
output   color3_read;
output  [15:0] xleft_out_din;
input   xleft_out_full_n;
output   xleft_out_write;
output  [15:0] ytop_out_din;
input   ytop_out_full_n;
output   ytop_out_write;
output  [7:0] color1_out_din;
input   color1_out_full_n;
output   color1_out_write;
output  [7:0] color2_out_din;
input   color2_out_full_n;
output   color2_out_write;
output  [7:0] color3_out_din;
input   color3_out_full_n;
output   color3_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg src_data_stream_3_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg dst_data_stream_3_V_write;
reg xleft_read;
reg xright_read;
reg ytop_read;
reg ydown_read;
reg color1_read;
reg color2_read;
reg color3_read;
reg xleft_out_write;
reg ytop_out_write;
reg color1_out_write;
reg color2_out_write;
reg color3_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_16_i_reg_825;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    src_data_stream_3_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    dst_data_stream_3_V_blk_n;
reg    xleft_blk_n;
reg    xright_blk_n;
reg    ytop_blk_n;
reg    ydown_blk_n;
reg    color1_blk_n;
reg    color2_blk_n;
reg    color3_blk_n;
reg    xleft_out_blk_n;
reg    ytop_out_blk_n;
reg    color1_out_blk_n;
reg    color2_out_blk_n;
reg    color3_out_blk_n;
reg   [10:0] j_i_reg_492;
reg   [15:0] xleft_read_reg_745;
reg    ap_block_state1;
reg   [15:0] xright_read_reg_750;
reg   [15:0] ytop_read_reg_756;
reg   [15:0] ydown_read_reg_761;
reg   [7:0] pix1_val_0_3_reg_766;
reg   [7:0] pix1_val_1_3_reg_771;
reg   [7:0] pix1_val_2_3_reg_776;
wire   [16:0] tmp_i_fu_507_p2;
reg   [16:0] tmp_i_reg_781;
wire   [16:0] tmp_2_i_fu_517_p2;
reg   [16:0] tmp_2_i_reg_786;
wire   [16:0] tmp_4_i_fu_527_p2;
reg   [16:0] tmp_4_i_reg_791;
wire   [16:0] tmp_6_i_fu_537_p2;
reg   [16:0] tmp_6_i_reg_796;
wire   [0:0] tmp_9_i_fu_547_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_fu_553_p2;
reg   [9:0] i_reg_805;
wire   [0:0] brmerge2_i_fu_583_p2;
reg   [0:0] brmerge2_i_reg_810;
wire   [0:0] or_cond7_i_fu_601_p2;
reg   [0:0] or_cond7_i_reg_815;
wire   [0:0] sel_tmp2_fu_607_p2;
reg   [0:0] sel_tmp2_reg_820;
wire   [0:0] tmp_16_i_fu_617_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_623_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] sel_tmp_fu_681_p2;
reg   [0:0] sel_tmp_reg_834;
wire   [0:0] sel_tmp5_fu_697_p2;
reg   [0:0] sel_tmp5_reg_841;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] i_i_reg_481;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] tmp_cast_i_fu_503_p1;
wire   [16:0] tmp_1_cast_i_fu_513_p1;
wire   [16:0] tmp_3_cast_i_fu_523_p1;
wire   [16:0] tmp_5_cast_i_fu_533_p1;
wire   [15:0] i_cast106_i_fu_543_p1;
wire   [16:0] tmp_11_cast_i_fu_564_p1;
wire   [0:0] tmp_10_i_fu_559_p2;
wire   [0:0] tmp_12_i_fu_568_p2;
wire   [0:0] tmp_15_i_fu_578_p2;
wire   [0:0] tmp_14_i_fu_573_p2;
wire   [0:0] brmerge_i_fu_589_p2;
wire   [0:0] brmerge1_i_fu_595_p2;
wire   [15:0] j_cast105_i_fu_613_p1;
wire   [0:0] tmp_20_i_fu_634_p2;
wire   [0:0] tmp4_fu_639_p2;
wire   [0:0] tmp_19_i_fu_629_p2;
wire   [16:0] tmp_21_cast_i_fu_650_p1;
wire   [0:0] tmp_22_i_fu_654_p2;
wire   [0:0] tmp_23_i_fu_665_p2;
wire   [0:0] tmp_24_i_fu_670_p2;
wire   [0:0] brmerge_fu_644_p2;
wire   [0:0] or_cond4_i_fu_659_p2;
wire   [0:0] or_cond6_i_fu_675_p2;
wire   [0:0] tmp6_fu_691_p2;
wire   [0:0] tmp5_fu_686_p2;
wire   [7:0] pix1_val_0_2_fu_703_p3;
wire   [7:0] pix1_val_1_2_fu_717_p3;
wire   [7:0] pix1_val_2_2_fu_731_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_481 <= i_reg_805;
    end else if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_481 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_fu_617_p2 == 1'd0))) begin
        j_i_reg_492 <= j_fu_623_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd0))) begin
        j_i_reg_492 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd0))) begin
        brmerge2_i_reg_810 <= brmerge2_i_fu_583_p2;
        or_cond7_i_reg_815 <= or_cond7_i_fu_601_p2;
        sel_tmp2_reg_820 <= sel_tmp2_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_805 <= i_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pix1_val_0_3_reg_766 <= color1_dout;
        pix1_val_1_3_reg_771 <= color2_dout;
        pix1_val_2_3_reg_776 <= color3_dout;
        tmp_2_i_reg_786 <= tmp_2_i_fu_517_p2;
        tmp_4_i_reg_791 <= tmp_4_i_fu_527_p2;
        tmp_6_i_reg_796 <= tmp_6_i_fu_537_p2;
        tmp_i_reg_781 <= tmp_i_fu_507_p2;
        xleft_read_reg_745 <= xleft_dout;
        xright_read_reg_750 <= xright_dout;
        ydown_read_reg_761 <= ydown_dout;
        ytop_read_reg_756 <= ytop_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_fu_617_p2 == 1'd0))) begin
        sel_tmp5_reg_841 <= sel_tmp5_fu_697_p2;
        sel_tmp_reg_834 <= sel_tmp_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_16_i_reg_825 <= tmp_16_i_fu_617_p2;
    end
end

always @ (*) begin
    if ((tmp_16_i_fu_617_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_blk_n = color1_empty_n;
    end else begin
        color1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_blk_n = color1_out_full_n;
    end else begin
        color1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_write = 1'b1;
    end else begin
        color1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_read = 1'b1;
    end else begin
        color1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_blk_n = color2_empty_n;
    end else begin
        color2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_blk_n = color2_out_full_n;
    end else begin
        color2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_write = 1'b1;
    end else begin
        color2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_read = 1'b1;
    end else begin
        color2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_blk_n = color3_empty_n;
    end else begin
        color3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_blk_n = color3_out_full_n;
    end else begin
        color3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_write = 1'b1;
    end else begin
        color3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_read = 1'b1;
    end else begin
        color3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_3_V_blk_n = dst_data_stream_3_V_full_n;
    end else begin
        dst_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        dst_data_stream_3_V_write = 1'b1;
    end else begin
        dst_data_stream_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_3_V_blk_n = src_data_stream_3_V_empty_n;
    end else begin
        src_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_16_i_reg_825 == 1'd0))) begin
        src_data_stream_3_V_read = 1'b1;
    end else begin
        src_data_stream_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_blk_n = xleft_empty_n;
    end else begin
        xleft_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_out_blk_n = xleft_out_full_n;
    end else begin
        xleft_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_out_write = 1'b1;
    end else begin
        xleft_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_read = 1'b1;
    end else begin
        xleft_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xright_blk_n = xright_empty_n;
    end else begin
        xright_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xright_read = 1'b1;
    end else begin
        xright_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ydown_blk_n = ydown_empty_n;
    end else begin
        ydown_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ydown_read = 1'b1;
    end else begin
        ydown_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_blk_n = ytop_empty_n;
    end else begin
        ytop_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_blk_n = ytop_out_full_n;
    end else begin
        ytop_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_write = 1'b1;
    end else begin
        ytop_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_read = 1'b1;
    end else begin
        ytop_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_9_i_fu_547_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_16_i_fu_617_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_16_i_fu_617_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((color1_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (ap_start == 1'b0) | (xleft_out_full_n == 1'b0) | (color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (ydown_empty_n == 1'b0) | (ytop_empty_n == 1'b0) | (xright_empty_n == 1'b0) | (xleft_empty_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_16_i_reg_825 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge1_i_fu_595_p2 = (tmp_14_i_fu_573_p2 | tmp_12_i_fu_568_p2);

assign brmerge2_i_fu_583_p2 = (tmp_12_i_fu_568_p2 | tmp_10_i_fu_559_p2);

assign brmerge_fu_644_p2 = (tmp_19_i_fu_629_p2 | tmp4_fu_639_p2);

assign brmerge_i_fu_589_p2 = (tmp_15_i_fu_578_p2 | tmp_10_i_fu_559_p2);

assign color1_out_din = color1_dout;

assign color2_out_din = color2_dout;

assign color3_out_din = color3_dout;

assign dst_data_stream_0_V_din = ((sel_tmp5_reg_841[0:0] === 1'b1) ? src_data_stream_0_V_dout : pix1_val_0_2_fu_703_p3);

assign dst_data_stream_1_V_din = ((sel_tmp5_reg_841[0:0] === 1'b1) ? src_data_stream_1_V_dout : pix1_val_1_2_fu_717_p3);

assign dst_data_stream_2_V_din = ((sel_tmp5_reg_841[0:0] === 1'b1) ? src_data_stream_2_V_dout : pix1_val_2_2_fu_731_p3);

assign dst_data_stream_3_V_din = src_data_stream_3_V_dout;

assign i_cast106_i_fu_543_p1 = i_i_reg_481;

assign i_fu_553_p2 = (i_i_reg_481 + 10'd1);

assign j_cast105_i_fu_613_p1 = j_i_reg_492;

assign j_fu_623_p2 = (j_i_reg_492 + 11'd1);

assign or_cond4_i_fu_659_p2 = (tmp_22_i_fu_654_p2 | tmp_19_i_fu_629_p2);

assign or_cond6_i_fu_675_p2 = (tmp_24_i_fu_670_p2 | tmp_23_i_fu_665_p2);

assign or_cond7_i_fu_601_p2 = (brmerge_i_fu_589_p2 & brmerge1_i_fu_595_p2);

assign pix1_val_0_2_fu_703_p3 = ((sel_tmp_reg_834[0:0] === 1'b1) ? src_data_stream_0_V_dout : pix1_val_0_3_reg_766);

assign pix1_val_1_2_fu_717_p3 = ((sel_tmp_reg_834[0:0] === 1'b1) ? src_data_stream_1_V_dout : pix1_val_1_3_reg_771);

assign pix1_val_2_2_fu_731_p3 = ((sel_tmp_reg_834[0:0] === 1'b1) ? src_data_stream_2_V_dout : pix1_val_2_3_reg_776);

assign sel_tmp2_fu_607_p2 = (brmerge2_i_fu_583_p2 ^ 1'd1);

assign sel_tmp5_fu_697_p2 = (tmp6_fu_691_p2 & tmp5_fu_686_p2);

assign sel_tmp_fu_681_p2 = (brmerge_fu_644_p2 & brmerge2_i_reg_810);

assign tmp4_fu_639_p2 = (tmp_20_i_fu_634_p2 | or_cond7_i_reg_815);

assign tmp5_fu_686_p2 = (sel_tmp2_reg_820 & or_cond4_i_fu_659_p2);

assign tmp6_fu_691_p2 = (or_cond6_i_fu_675_p2 & brmerge_fu_644_p2);

assign tmp_10_i_fu_559_p2 = ((i_cast106_i_fu_543_p1 < ytop_read_reg_756) ? 1'b1 : 1'b0);

assign tmp_11_cast_i_fu_564_p1 = i_i_reg_481;

assign tmp_12_i_fu_568_p2 = ((tmp_11_cast_i_fu_564_p1 > tmp_i_reg_781) ? 1'b1 : 1'b0);

assign tmp_14_i_fu_573_p2 = ((i_cast106_i_fu_543_p1 < ydown_read_reg_761) ? 1'b1 : 1'b0);

assign tmp_15_i_fu_578_p2 = ((tmp_11_cast_i_fu_564_p1 > tmp_6_i_reg_796) ? 1'b1 : 1'b0);

assign tmp_16_i_fu_617_p2 = ((j_i_reg_492 == 11'd1280) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_629_p2 = ((j_cast105_i_fu_613_p1 < xleft_read_reg_745) ? 1'b1 : 1'b0);

assign tmp_1_cast_i_fu_513_p1 = xright_dout;

assign tmp_20_i_fu_634_p2 = ((j_cast105_i_fu_613_p1 > xright_read_reg_750) ? 1'b1 : 1'b0);

assign tmp_21_cast_i_fu_650_p1 = j_i_reg_492;

assign tmp_22_i_fu_654_p2 = ((tmp_21_cast_i_fu_650_p1 > tmp_4_i_reg_791) ? 1'b1 : 1'b0);

assign tmp_23_i_fu_665_p2 = ((j_cast105_i_fu_613_p1 < xright_read_reg_750) ? 1'b1 : 1'b0);

assign tmp_24_i_fu_670_p2 = ((tmp_21_cast_i_fu_650_p1 > tmp_2_i_reg_786) ? 1'b1 : 1'b0);

assign tmp_2_i_fu_517_p2 = (tmp_1_cast_i_fu_513_p1 + 17'd4);

assign tmp_3_cast_i_fu_523_p1 = xleft_dout;

assign tmp_4_i_fu_527_p2 = (tmp_3_cast_i_fu_523_p1 + 17'd4);

assign tmp_5_cast_i_fu_533_p1 = ytop_dout;

assign tmp_6_i_fu_537_p2 = (tmp_5_cast_i_fu_533_p1 + 17'd4);

assign tmp_9_i_fu_547_p2 = ((i_i_reg_481 == 10'd720) ? 1'b1 : 1'b0);

assign tmp_cast_i_fu_503_p1 = ydown_dout;

assign tmp_i_fu_507_p2 = (tmp_cast_i_fu_503_p1 + 17'd4);

assign xleft_out_din = xleft_dout;

assign ytop_out_din = ytop_dout;

endmodule //Add_Rectangle
