// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Add_Char6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        src_data_stream_3_V_dout,
        src_data_stream_3_V_empty_n,
        src_data_stream_3_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        dst_data_stream_3_V_din,
        dst_data_stream_3_V_full_n,
        dst_data_stream_3_V_write,
        ch6x_loc_dout,
        ch6x_loc_empty_n,
        ch6x_loc_read,
        ytop_s_dout,
        ytop_s_empty_n,
        ytop_s_read,
        char6_dout,
        char6_empty_n,
        char6_read,
        color1_dout,
        color1_empty_n,
        color1_read,
        color2_dout,
        color2_empty_n,
        color2_read,
        color3_dout,
        color3_empty_n,
        color3_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
input  [7:0] src_data_stream_3_V_dout;
input   src_data_stream_3_V_empty_n;
output   src_data_stream_3_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
output  [7:0] dst_data_stream_3_V_din;
input   dst_data_stream_3_V_full_n;
output   dst_data_stream_3_V_write;
input  [15:0] ch6x_loc_dout;
input   ch6x_loc_empty_n;
output   ch6x_loc_read;
input  [15:0] ytop_s_dout;
input   ytop_s_empty_n;
output   ytop_s_read;
input  [7:0] char6_dout;
input   char6_empty_n;
output   char6_read;
input  [7:0] color1_dout;
input   color1_empty_n;
output   color1_read;
input  [7:0] color2_dout;
input   color2_empty_n;
output   color2_read;
input  [7:0] color3_dout;
input   color3_empty_n;
output   color3_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg src_data_stream_3_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg dst_data_stream_3_V_write;
reg ch6x_loc_read;
reg ytop_s_read;
reg char6_read;
reg color1_read;
reg color2_read;
reg color3_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] letter298_address0;
reg    letter298_ce0;
wire   [15:0] letter298_q0;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_36_i_i_reg_723;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    src_data_stream_3_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    dst_data_stream_3_V_blk_n;
reg    ch6x_loc_blk_n;
reg    ytop_s_blk_n;
reg    char6_blk_n;
reg    color1_blk_n;
reg    color2_blk_n;
reg    color3_blk_n;
reg   [10:0] j_i_i_reg_395;
reg   [15:0] ytop_read_reg_649;
reg    ap_block_state1;
reg   [7:0] markpix_val_0_reg_654;
reg   [7:0] markpix_val_1_reg_659;
reg   [7:0] markpix_val_2_reg_664;
reg   [15:0] ch6x_loc_read_reg_669;
wire   [0:0] tmp_i_i_fu_406_p2;
reg   [0:0] tmp_i_i_reg_675;
wire   [16:0] tmp_cast_i_i_fu_412_p1;
reg   [16:0] tmp_cast_i_i_reg_680;
wire   [16:0] tmp_25_i_i_fu_416_p2;
reg   [16:0] tmp_25_i_i_reg_685;
wire   [10:0] tmp_13_cast_fu_426_p3;
reg   [10:0] tmp_13_cast_reg_690;
wire   [16:0] tmp_28_i_i_fu_438_p2;
reg   [16:0] tmp_28_i_i_reg_695;
wire   [9:0] i_fu_454_p2;
reg   [9:0] i_reg_703;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_29_i_i_fu_448_p2;
wire   [0:0] sel_tmp6_fu_516_p2;
reg   [0:0] sel_tmp6_reg_713;
reg   [15:0] p_Val2_s_reg_718;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_36_i_i_fu_526_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_532_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_20_fu_581_p3;
reg   [0:0] tmp_20_reg_732;
wire   [0:0] sel_tmp7_fu_593_p2;
reg   [0:0] sel_tmp7_reg_739;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [9:0] i_i_i_reg_384;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_14_cast_fu_489_p1;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] tmp_fu_422_p1;
wire   [16:0] tmp_27_cast108_i_i_fu_434_p1;
wire   [15:0] i_cast107_i_i_fu_444_p1;
wire   [16:0] tmp_32_cast_i_i_fu_465_p1;
wire   [16:0] tmp_33_i_i_fu_469_p2;
wire   [10:0] tmp_35_i_i_cast_fu_474_p4;
wire   [10:0] tmp_5_fu_484_p2;
wire   [0:0] ult_fu_494_p2;
wire   [0:0] rev8_fu_499_p2;
wire   [0:0] tmp15_fu_505_p2;
wire   [0:0] tmp_31_i_i_fu_460_p2;
wire   [0:0] sel_tmp6_demorgan_fu_510_p2;
wire   [15:0] j_cast106_i_i_fu_522_p1;
wire   [0:0] ult9_fu_538_p2;
wire   [16:0] tmp_40_cast_i_i_fu_549_p1;
wire   [15:0] tmp_42_i_i_fu_558_p2;
wire   [14:0] tmp_s_fu_563_p4;
wire  signed [15:0] xos_fu_573_p1;
wire   [31:0] bvh_d_index_fu_577_p1;
wire   [0:0] tmp_41_i_i_fu_553_p2;
wire   [0:0] tmp16_fu_588_p2;
wire   [0:0] rev_fu_543_p2;
wire   [7:0] markpix_val_0_1_fu_599_p3;
wire   [7:0] markpix_val_1_1_fu_605_p3;
wire   [7:0] markpix_val_2_1_fu_611_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

Add_Char1_letter #(
    .DataWidth( 16 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
letter298_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(letter298_address0),
    .ce0(letter298_ce0),
    .q0(letter298_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_448_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_i_i_reg_384 <= i_reg_703;
    end else if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_384 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_fu_526_p2 == 1'd0))) begin
        j_i_i_reg_395 <= j_fu_532_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_i_i_reg_395 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ch6x_loc_read_reg_669 <= ch6x_loc_dout;
        markpix_val_0_reg_654 <= color1_dout;
        markpix_val_1_reg_659 <= color2_dout;
        markpix_val_2_reg_664 <= color3_dout;
        tmp_13_cast_reg_690[10 : 5] <= tmp_13_cast_fu_426_p3[10 : 5];
        tmp_25_i_i_reg_685 <= tmp_25_i_i_fu_416_p2;
        tmp_28_i_i_reg_695 <= tmp_28_i_i_fu_438_p2;
        tmp_cast_i_i_reg_680[15 : 0] <= tmp_cast_i_i_fu_412_p1[15 : 0];
        tmp_i_i_reg_675 <= tmp_i_i_fu_406_p2;
        ytop_read_reg_649 <= ytop_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_703 <= i_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_s_reg_718 <= letter298_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_448_p2 == 1'd0))) begin
        sel_tmp6_reg_713 <= sel_tmp6_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_fu_526_p2 == 1'd0))) begin
        sel_tmp7_reg_739 <= sel_tmp7_fu_593_p2;
        tmp_20_reg_732 <= tmp_20_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_36_i_i_reg_723 <= tmp_36_i_i_fu_526_p2;
    end
end

always @ (*) begin
    if ((tmp_36_i_i_fu_526_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_448_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ch6x_loc_blk_n = ch6x_loc_empty_n;
    end else begin
        ch6x_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ch6x_loc_read = 1'b1;
    end else begin
        ch6x_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char6_blk_n = char6_empty_n;
    end else begin
        char6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char6_read = 1'b1;
    end else begin
        char6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_blk_n = color1_empty_n;
    end else begin
        color1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_read = 1'b1;
    end else begin
        color1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_blk_n = color2_empty_n;
    end else begin
        color2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_read = 1'b1;
    end else begin
        color2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_blk_n = color3_empty_n;
    end else begin
        color3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_read = 1'b1;
    end else begin
        color3_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_3_V_blk_n = dst_data_stream_3_V_full_n;
    end else begin
        dst_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        dst_data_stream_3_V_write = 1'b1;
    end else begin
        dst_data_stream_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_448_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        letter298_ce0 = 1'b1;
    end else begin
        letter298_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_3_V_blk_n = src_data_stream_3_V_empty_n;
    end else begin
        src_data_stream_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_36_i_i_reg_723 == 1'd0))) begin
        src_data_stream_3_V_read = 1'b1;
    end else begin
        src_data_stream_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_s_blk_n = ytop_s_empty_n;
    end else begin
        ytop_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_s_read = 1'b1;
    end else begin
        ytop_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_36_i_i_fu_526_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_36_i_i_fu_526_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((color3_empty_n == 1'b0) | (color2_empty_n == 1'b0) | (color1_empty_n == 1'b0) | (char6_empty_n == 1'b0) | (ytop_s_empty_n == 1'b0) | (ch6x_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((dst_data_stream_3_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_2_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_1_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((dst_data_stream_0_V_full_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_3_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_2_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_1_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)) | ((src_data_stream_0_V_empty_n == 1'b0) & (tmp_36_i_i_reg_723 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bvh_d_index_fu_577_p1 = $unsigned(xos_fu_573_p1);

assign dst_data_stream_0_V_din = ((sel_tmp7_reg_739[0:0] === 1'b1) ? markpix_val_0_1_fu_599_p3 : src_data_stream_0_V_dout);

assign dst_data_stream_1_V_din = ((sel_tmp7_reg_739[0:0] === 1'b1) ? markpix_val_1_1_fu_605_p3 : src_data_stream_1_V_dout);

assign dst_data_stream_2_V_din = ((sel_tmp7_reg_739[0:0] === 1'b1) ? markpix_val_2_1_fu_611_p3 : src_data_stream_2_V_dout);

assign dst_data_stream_3_V_din = ((sel_tmp7_reg_739[0:0] === 1'b1) ? 8'd0 : src_data_stream_3_V_dout);

assign i_cast107_i_i_fu_444_p1 = i_i_i_reg_384;

assign i_fu_454_p2 = (i_i_i_reg_384 + 10'd1);

assign j_cast106_i_i_fu_522_p1 = j_i_i_reg_395;

assign j_fu_532_p2 = (j_i_i_reg_395 + 11'd1);

assign letter298_address0 = tmp_14_cast_fu_489_p1;

assign markpix_val_0_1_fu_599_p3 = ((tmp_20_reg_732[0:0] === 1'b1) ? markpix_val_0_reg_654 : 8'd255);

assign markpix_val_1_1_fu_605_p3 = ((tmp_20_reg_732[0:0] === 1'b1) ? markpix_val_1_reg_659 : 8'd255);

assign markpix_val_2_1_fu_611_p3 = ((tmp_20_reg_732[0:0] === 1'b1) ? markpix_val_2_reg_664 : 8'd255);

assign rev8_fu_499_p2 = (ult_fu_494_p2 ^ 1'd1);

assign rev_fu_543_p2 = (ult9_fu_538_p2 ^ 1'd1);

assign sel_tmp6_demorgan_fu_510_p2 = (tmp_31_i_i_fu_460_p2 | tmp15_fu_505_p2);

assign sel_tmp6_fu_516_p2 = (sel_tmp6_demorgan_fu_510_p2 ^ 1'd1);

assign sel_tmp7_fu_593_p2 = (tmp16_fu_588_p2 & rev_fu_543_p2);

assign start_out = real_start;

assign tmp15_fu_505_p2 = (tmp_i_i_reg_675 | rev8_fu_499_p2);

assign tmp16_fu_588_p2 = (tmp_41_i_i_fu_553_p2 & sel_tmp6_reg_713);

assign tmp_13_cast_fu_426_p3 = {{tmp_fu_422_p1}, {5'd0}};

assign tmp_14_cast_fu_489_p1 = tmp_5_fu_484_p2;

assign tmp_20_fu_581_p3 = p_Val2_s_reg_718[bvh_d_index_fu_577_p1];

assign tmp_25_i_i_fu_416_p2 = (17'd64 + tmp_cast_i_i_fu_412_p1);

assign tmp_27_cast108_i_i_fu_434_p1 = ch6x_loc_dout;

assign tmp_28_i_i_fu_438_p2 = (17'd32 + tmp_27_cast108_i_i_fu_434_p1);

assign tmp_29_i_i_fu_448_p2 = ((i_i_i_reg_384 == 10'd720) ? 1'b1 : 1'b0);

assign tmp_31_i_i_fu_460_p2 = ((i_cast107_i_i_fu_444_p1 < ytop_read_reg_649) ? 1'b1 : 1'b0);

assign tmp_32_cast_i_i_fu_465_p1 = i_i_i_reg_384;

assign tmp_33_i_i_fu_469_p2 = (tmp_32_cast_i_i_fu_465_p1 - tmp_cast_i_i_reg_680);

assign tmp_35_i_i_cast_fu_474_p4 = {{tmp_33_i_i_fu_469_p2[11:1]}};

assign tmp_36_i_i_fu_526_p2 = ((j_i_i_reg_395 == 11'd1280) ? 1'b1 : 1'b0);

assign tmp_40_cast_i_i_fu_549_p1 = j_i_i_reg_395;

assign tmp_41_i_i_fu_553_p2 = ((tmp_40_cast_i_i_fu_549_p1 < tmp_28_i_i_reg_695) ? 1'b1 : 1'b0);

assign tmp_42_i_i_fu_558_p2 = (j_cast106_i_i_fu_522_p1 - ch6x_loc_read_reg_669);

assign tmp_5_fu_484_p2 = (tmp_13_cast_reg_690 + tmp_35_i_i_cast_fu_474_p4);

assign tmp_cast_i_i_fu_412_p1 = ytop_s_dout;

assign tmp_fu_422_p1 = char6_dout[5:0];

assign tmp_i_i_fu_406_p2 = ((char6_dout == 8'd26) ? 1'b1 : 1'b0);

assign tmp_s_fu_563_p4 = {{tmp_42_i_i_fu_558_p2[15:1]}};

assign ult9_fu_538_p2 = ((j_cast106_i_i_fu_522_p1 < ch6x_loc_read_reg_669) ? 1'b1 : 1'b0);

assign ult_fu_494_p2 = ((tmp_32_cast_i_i_fu_465_p1 < tmp_25_i_i_reg_685) ? 1'b1 : 1'b0);

assign xos_fu_573_p1 = $signed(tmp_s_fu_563_p4);

always @ (posedge ap_clk) begin
    tmp_cast_i_i_reg_680[16] <= 1'b0;
    tmp_13_cast_reg_690[4:0] <= 5'b00000;
end

endmodule //Add_Char6
