// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_rect_entry3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        xleft_s,
        xright_s,
        ytop_s,
        ydown_s,
        color1,
        color2,
        color3,
        char1,
        char2,
        char3,
        char4,
        char5,
        char6,
        xleft_out_din,
        xleft_out_full_n,
        xleft_out_write,
        xright_out_din,
        xright_out_full_n,
        xright_out_write,
        ytop_out_din,
        ytop_out_full_n,
        ytop_out_write,
        ydown_out_din,
        ydown_out_full_n,
        ydown_out_write,
        color1_out_din,
        color1_out_full_n,
        color1_out_write,
        color2_out_din,
        color2_out_full_n,
        color2_out_write,
        color3_out_din,
        color3_out_full_n,
        color3_out_write,
        char1_out_din,
        char1_out_full_n,
        char1_out_write,
        char2_out_din,
        char2_out_full_n,
        char2_out_write,
        char3_out_din,
        char3_out_full_n,
        char3_out_write,
        char4_out_din,
        char4_out_full_n,
        char4_out_write,
        char5_out_din,
        char5_out_full_n,
        char5_out_write,
        char6_out_din,
        char6_out_full_n,
        char6_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] xleft_s;
input  [15:0] xright_s;
input  [15:0] ytop_s;
input  [15:0] ydown_s;
input  [7:0] color1;
input  [7:0] color2;
input  [7:0] color3;
input  [7:0] char1;
input  [7:0] char2;
input  [7:0] char3;
input  [7:0] char4;
input  [7:0] char5;
input  [7:0] char6;
output  [15:0] xleft_out_din;
input   xleft_out_full_n;
output   xleft_out_write;
output  [15:0] xright_out_din;
input   xright_out_full_n;
output   xright_out_write;
output  [15:0] ytop_out_din;
input   ytop_out_full_n;
output   ytop_out_write;
output  [15:0] ydown_out_din;
input   ydown_out_full_n;
output   ydown_out_write;
output  [7:0] color1_out_din;
input   color1_out_full_n;
output   color1_out_write;
output  [7:0] color2_out_din;
input   color2_out_full_n;
output   color2_out_write;
output  [7:0] color3_out_din;
input   color3_out_full_n;
output   color3_out_write;
output  [7:0] char1_out_din;
input   char1_out_full_n;
output   char1_out_write;
output  [7:0] char2_out_din;
input   char2_out_full_n;
output   char2_out_write;
output  [7:0] char3_out_din;
input   char3_out_full_n;
output   char3_out_write;
output  [7:0] char4_out_din;
input   char4_out_full_n;
output   char4_out_write;
output  [7:0] char5_out_din;
input   char5_out_full_n;
output   char5_out_write;
output  [7:0] char6_out_din;
input   char6_out_full_n;
output   char6_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg xleft_out_write;
reg xright_out_write;
reg ytop_out_write;
reg ydown_out_write;
reg color1_out_write;
reg color2_out_write;
reg color3_out_write;
reg char1_out_write;
reg char2_out_write;
reg char3_out_write;
reg char4_out_write;
reg char5_out_write;
reg char6_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    xleft_out_blk_n;
reg    xright_out_blk_n;
reg    ytop_out_blk_n;
reg    ydown_out_blk_n;
reg    color1_out_blk_n;
reg    color2_out_blk_n;
reg    color3_out_blk_n;
reg    char1_out_blk_n;
reg    char2_out_blk_n;
reg    char3_out_blk_n;
reg    char4_out_blk_n;
reg    char5_out_blk_n;
reg    char6_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char1_out_blk_n = char1_out_full_n;
    end else begin
        char1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char1_out_write = 1'b1;
    end else begin
        char1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char2_out_blk_n = char2_out_full_n;
    end else begin
        char2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char2_out_write = 1'b1;
    end else begin
        char2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char3_out_blk_n = char3_out_full_n;
    end else begin
        char3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char3_out_write = 1'b1;
    end else begin
        char3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char4_out_blk_n = char4_out_full_n;
    end else begin
        char4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char4_out_write = 1'b1;
    end else begin
        char4_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char5_out_blk_n = char5_out_full_n;
    end else begin
        char5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char5_out_write = 1'b1;
    end else begin
        char5_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        char6_out_blk_n = char6_out_full_n;
    end else begin
        char6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        char6_out_write = 1'b1;
    end else begin
        char6_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        color1_out_blk_n = color1_out_full_n;
    end else begin
        color1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color1_out_write = 1'b1;
    end else begin
        color1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        color2_out_blk_n = color2_out_full_n;
    end else begin
        color2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color2_out_write = 1'b1;
    end else begin
        color2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        color3_out_blk_n = color3_out_full_n;
    end else begin
        color3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        color3_out_write = 1'b1;
    end else begin
        color3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        xleft_out_blk_n = xleft_out_full_n;
    end else begin
        xleft_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xleft_out_write = 1'b1;
    end else begin
        xleft_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        xright_out_blk_n = xright_out_full_n;
    end else begin
        xright_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        xright_out_write = 1'b1;
    end else begin
        xright_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ydown_out_blk_n = ydown_out_full_n;
    end else begin
        ydown_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ydown_out_write = 1'b1;
    end else begin
        ydown_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ytop_out_blk_n = ytop_out_full_n;
    end else begin
        ytop_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ytop_out_write = 1'b1;
    end else begin
        ytop_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((char5_out_full_n == 1'b0) | (char4_out_full_n == 1'b0) | (char3_out_full_n == 1'b0) | (char2_out_full_n == 1'b0) | (char1_out_full_n == 1'b0) | (color3_out_full_n == 1'b0) | (color2_out_full_n == 1'b0) | (real_start == 1'b0) | (color1_out_full_n == 1'b0) | (ydown_out_full_n == 1'b0) | (ytop_out_full_n == 1'b0) | (xright_out_full_n == 1'b0) | (xleft_out_full_n == 1'b0) | (char6_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign char1_out_din = char1;

assign char2_out_din = char2;

assign char3_out_din = char3;

assign char4_out_din = char4;

assign char5_out_din = char5;

assign char6_out_din = char6;

assign color1_out_din = color1;

assign color2_out_din = color2;

assign color3_out_din = color3;

assign start_out = real_start;

assign xleft_out_din = xleft_s;

assign xright_out_din = xright_s;

assign ydown_out_din = ydown_s;

assign ytop_out_din = ytop_s;

endmodule //hls_rect_entry3
