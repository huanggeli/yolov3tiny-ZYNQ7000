-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add_Char1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_3_V_empty_n : IN STD_LOGIC;
    src_data_stream_3_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_3_V_full_n : IN STD_LOGIC;
    dst_data_stream_3_V_write : OUT STD_LOGIC;
    x_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    x_empty_n : IN STD_LOGIC;
    x_read : OUT STD_LOGIC;
    y_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    y_empty_n : IN STD_LOGIC;
    y_read : OUT STD_LOGIC;
    chr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    chr_empty_n : IN STD_LOGIC;
    chr_read : OUT STD_LOGIC;
    color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color1_empty_n : IN STD_LOGIC;
    color1_read : OUT STD_LOGIC;
    color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color2_empty_n : IN STD_LOGIC;
    color2_read : OUT STD_LOGIC;
    color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color3_empty_n : IN STD_LOGIC;
    color3_read : OUT STD_LOGIC;
    y_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_out_full_n : IN STD_LOGIC;
    y_out_write : OUT STD_LOGIC;
    color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color1_out_full_n : IN STD_LOGIC;
    color1_out_write : OUT STD_LOGIC;
    color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color2_out_full_n : IN STD_LOGIC;
    color2_out_write : OUT STD_LOGIC;
    color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color3_out_full_n : IN STD_LOGIC;
    color3_out_write : OUT STD_LOGIC );
end;


architecture behav of Add_Char1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv17_40 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_20 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal letter_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal letter_ce0 : STD_LOGIC;
    signal letter_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_141_i_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal src_data_stream_3_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_3_V_blk_n : STD_LOGIC;
    signal x_blk_n : STD_LOGIC;
    signal y_blk_n : STD_LOGIC;
    signal chr_blk_n : STD_LOGIC;
    signal color1_blk_n : STD_LOGIC;
    signal color2_blk_n : STD_LOGIC;
    signal color3_blk_n : STD_LOGIC;
    signal y_out_blk_n : STD_LOGIC;
    signal color1_out_blk_n : STD_LOGIC;
    signal color2_out_blk_n : STD_LOGIC;
    signal color3_out_blk_n : STD_LOGIC;
    signal j_i_reg_487 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_read_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal y_read_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal markpix_val_0_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_1_reg_757 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_2_reg_762 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_i_fu_504_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_i_reg_772 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_130_i_fu_508_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_130_i_reg_777 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_cast_fu_518_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_cast_reg_782 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_133_i_fu_530_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_133_i_reg_787 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_795 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_134_i_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_141_i_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_65_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal i_i_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_39_cast_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_132_cast107_i_fu_526_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_cast106_i_fu_536_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_cast_i_fu_557_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_138_i_fu_561_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_140_i_cast_fu_566_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_576_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ult_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp36_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_i_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast105_i_fu_614_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ult9_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_cast_i_fu_641_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_147_i_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_655_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal xos_fu_665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bvh_d_index_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_146_i_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp37_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal markpix_val_0_6_fu_691_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_1_6_fu_697_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal markpix_val_2_6_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Add_Char1_letter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    letter_U : component Add_Char1_letter
    generic map (
        DataWidth => 16,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => letter_address0,
        ce0 => letter_ce0,
        q0 => letter_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_134_i_fu_540_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_476 <= i_reg_795;
            elsif ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_476 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_fu_618_p2 = ap_const_lv1_0))) then 
                j_i_reg_487 <= j_fu_624_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_i_reg_487 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_795 <= i_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                markpix_val_0_reg_752 <= color1_dout;
                markpix_val_1_reg_757 <= color2_dout;
                markpix_val_2_reg_762 <= color3_dout;
                tmp_130_i_reg_777 <= tmp_130_i_fu_508_p2;
                tmp_133_i_reg_787 <= tmp_133_i_fu_530_p2;
                    tmp_38_cast_reg_782(10 downto 5) <= tmp_38_cast_fu_518_p3(10 downto 5);
                    tmp_cast_i_reg_772(15 downto 0) <= tmp_cast_i_fu_504_p1(15 downto 0);
                tmp_i_reg_767 <= tmp_i_fu_498_p2;
                x_read_reg_741 <= x_dout;
                y_read_reg_747 <= y_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_s_reg_810 <= letter_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_134_i_fu_540_p2 = ap_const_lv1_0))) then
                sel_tmp6_reg_805 <= sel_tmp6_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_fu_618_p2 = ap_const_lv1_0))) then
                sel_tmp7_reg_831 <= sel_tmp7_fu_685_p2;
                tmp_65_reg_824 <= tmp_65_fu_673_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_141_i_reg_815 <= tmp_141_i_fu_618_p2;
            end if;
        end if;
    end process;
    tmp_cast_i_reg_772(16) <= '0';
    tmp_38_cast_reg_782(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n, ap_CS_fsm_state2, tmp_134_i_fu_540_p2, tmp_141_i_fu_618_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_134_i_fu_540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_141_i_fu_618_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_141_i_fu_618_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
                ap_block_state1 <= ((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, tmp_141_i_reg_815)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_141_i_reg_815 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(tmp_141_i_fu_618_p2)
    begin
        if ((tmp_141_i_fu_618_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_134_i_fu_540_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_134_i_fu_540_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_134_i_fu_540_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_134_i_fu_540_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bvh_d_index_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xos_fu_665_p1),32));

    chr_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, chr_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chr_blk_n <= chr_empty_n;
        else 
            chr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chr_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chr_read <= ap_const_logic_1;
        else 
            chr_read <= ap_const_logic_0;
        end if; 
    end process;


    color1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_blk_n <= color1_empty_n;
        else 
            color1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_blk_n <= color1_out_full_n;
        else 
            color1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color1_out_din <= color1_dout;

    color1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_write <= ap_const_logic_1;
        else 
            color1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_read <= ap_const_logic_1;
        else 
            color1_read <= ap_const_logic_0;
        end if; 
    end process;


    color2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_blk_n <= color2_empty_n;
        else 
            color2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_blk_n <= color2_out_full_n;
        else 
            color2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color2_out_din <= color2_dout;

    color2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_write <= ap_const_logic_1;
        else 
            color2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_read <= ap_const_logic_1;
        else 
            color2_read <= ap_const_logic_0;
        end if; 
    end process;


    color3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_blk_n <= color3_empty_n;
        else 
            color3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_blk_n <= color3_out_full_n;
        else 
            color3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color3_out_din <= color3_dout;

    color3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_write <= ap_const_logic_1;
        else 
            color3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_read <= ap_const_logic_1;
        else 
            color3_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        markpix_val_0_6_fu_691_p3 when (sel_tmp7_reg_831(0) = '1') else 
        src_data_stream_0_V_dout;

    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        markpix_val_1_6_fu_697_p3 when (sel_tmp7_reg_831(0) = '1') else 
        src_data_stream_1_V_dout;

    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        markpix_val_2_6_fu_703_p3 when (sel_tmp7_reg_831(0) = '1') else 
        src_data_stream_2_V_dout;

    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_3_V_blk_n_assign_proc : process(dst_data_stream_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_3_V_blk_n <= dst_data_stream_3_V_full_n;
        else 
            dst_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_3_V_din <= 
        ap_const_lv8_0 when (sel_tmp7_reg_831(0) = '1') else 
        src_data_stream_3_V_dout;

    dst_data_stream_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            dst_data_stream_3_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_cast106_i_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_476),16));
    i_fu_546_p2 <= std_logic_vector(unsigned(i_i_reg_476) + unsigned(ap_const_lv10_1));
    j_cast105_i_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_487),16));
    j_fu_624_p2 <= std_logic_vector(unsigned(j_i_reg_487) + unsigned(ap_const_lv11_1));
    letter_address0 <= tmp_39_cast_fu_581_p1(10 - 1 downto 0);

    letter_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            letter_ce0 <= ap_const_logic_1;
        else 
            letter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    markpix_val_0_6_fu_691_p3 <= 
        markpix_val_0_reg_752 when (tmp_65_reg_824(0) = '1') else 
        ap_const_lv8_FF;
    markpix_val_1_6_fu_697_p3 <= 
        markpix_val_1_reg_757 when (tmp_65_reg_824(0) = '1') else 
        ap_const_lv8_FF;
    markpix_val_2_6_fu_703_p3 <= 
        markpix_val_2_reg_762 when (tmp_65_reg_824(0) = '1') else 
        ap_const_lv8_FF;
    rev8_fu_591_p2 <= (ult_fu_586_p2 xor ap_const_lv1_1);
    rev_fu_635_p2 <= (ult9_fu_630_p2 xor ap_const_lv1_1);
    sel_tmp6_demorgan_fu_602_p2 <= (tmp_136_i_fu_552_p2 or tmp36_fu_597_p2);
    sel_tmp6_fu_608_p2 <= (sel_tmp6_demorgan_fu_602_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_685_p2 <= (tmp37_fu_680_p2 and rev_fu_635_p2);

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_3_V_blk_n_assign_proc : process(src_data_stream_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_141_i_reg_815)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_3_V_blk_n <= src_data_stream_3_V_empty_n;
        else 
            src_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_141_i_reg_815, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_141_i_reg_815 = ap_const_lv1_0))) then 
            src_data_stream_3_V_read <= ap_const_logic_1;
        else 
            src_data_stream_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp36_fu_597_p2 <= (tmp_i_reg_767 or rev8_fu_591_p2);
    tmp37_fu_680_p2 <= (tmp_146_i_fu_645_p2 and sel_tmp6_reg_805);
    tmp_130_i_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv17_40) + unsigned(tmp_cast_i_fu_504_p1));
    tmp_132_cast107_i_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_dout),17));
    tmp_133_i_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv17_20) + unsigned(tmp_132_cast107_i_fu_526_p1));
    tmp_134_i_fu_540_p2 <= "1" when (i_i_reg_476 = ap_const_lv10_2D0) else "0";
    tmp_136_i_fu_552_p2 <= "1" when (unsigned(i_cast106_i_fu_536_p1) < unsigned(y_read_reg_747)) else "0";
    tmp_137_cast_i_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_476),17));
    tmp_138_i_fu_561_p2 <= std_logic_vector(unsigned(tmp_137_cast_i_fu_557_p1) - unsigned(tmp_cast_i_reg_772));
    tmp_140_i_cast_fu_566_p4 <= tmp_138_i_fu_561_p2(11 downto 1);
    tmp_141_i_fu_618_p2 <= "1" when (j_i_reg_487 = ap_const_lv11_500) else "0";
    tmp_145_cast_i_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_487),17));
    tmp_146_i_fu_645_p2 <= "1" when (unsigned(tmp_145_cast_i_fu_641_p1) < unsigned(tmp_133_i_reg_787)) else "0";
    tmp_147_i_fu_650_p2 <= std_logic_vector(unsigned(j_cast105_i_fu_614_p1) - unsigned(x_read_reg_741));
    tmp_20_fu_576_p2 <= std_logic_vector(unsigned(tmp_38_cast_reg_782) + unsigned(tmp_140_i_cast_fu_566_p4));
    tmp_38_cast_fu_518_p3 <= (tmp_fu_514_p1 & ap_const_lv5_0);
    tmp_39_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_576_p2),64));
    tmp_65_fu_673_p3 <= p_Val2_s_reg_810(to_integer(unsigned(bvh_d_index_fu_669_p1)) downto to_integer(unsigned(bvh_d_index_fu_669_p1))) when (to_integer(unsigned(bvh_d_index_fu_669_p1))>= 0 and to_integer(unsigned(bvh_d_index_fu_669_p1))<=15) else "-";
    tmp_cast_i_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_dout),17));
    tmp_fu_514_p1 <= chr_dout(6 - 1 downto 0);
    tmp_i_fu_498_p2 <= "1" when (chr_dout = ap_const_lv8_1A) else "0";
    tmp_s_fu_655_p4 <= tmp_147_i_fu_650_p2(15 downto 1);
    ult9_fu_630_p2 <= "1" when (unsigned(j_cast105_i_fu_614_p1) < unsigned(x_read_reg_741)) else "0";
    ult_fu_586_p2 <= "1" when (unsigned(tmp_137_cast_i_fu_557_p1) < unsigned(tmp_130_i_reg_777)) else "0";

    x_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_blk_n <= x_empty_n;
        else 
            x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_read <= ap_const_logic_1;
        else 
            x_read <= ap_const_logic_0;
        end if; 
    end process;

        xos_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_655_p4),16));


    y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_blk_n <= y_empty_n;
        else 
            y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, y_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_blk_n <= y_out_full_n;
        else 
            y_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_out_din <= y_dout;

    y_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_out_write <= ap_const_logic_1;
        else 
            y_out_write <= ap_const_logic_0;
        end if; 
    end process;


    y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, x_empty_n, y_empty_n, chr_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, y_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (color1_out_full_n = ap_const_logic_0) or (y_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (chr_empty_n = ap_const_logic_0) or (y_empty_n = ap_const_logic_0) or (x_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_read <= ap_const_logic_1;
        else 
            y_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
