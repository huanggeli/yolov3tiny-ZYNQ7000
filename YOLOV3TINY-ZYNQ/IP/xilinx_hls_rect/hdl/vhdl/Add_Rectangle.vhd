-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add_Rectangle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    src_data_stream_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_3_V_empty_n : IN STD_LOGIC;
    src_data_stream_3_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    dst_data_stream_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_3_V_full_n : IN STD_LOGIC;
    dst_data_stream_3_V_write : OUT STD_LOGIC;
    xleft_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    xleft_empty_n : IN STD_LOGIC;
    xleft_read : OUT STD_LOGIC;
    xright_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    xright_empty_n : IN STD_LOGIC;
    xright_read : OUT STD_LOGIC;
    ytop_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ytop_empty_n : IN STD_LOGIC;
    ytop_read : OUT STD_LOGIC;
    ydown_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    ydown_empty_n : IN STD_LOGIC;
    ydown_read : OUT STD_LOGIC;
    color1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color1_empty_n : IN STD_LOGIC;
    color1_read : OUT STD_LOGIC;
    color2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color2_empty_n : IN STD_LOGIC;
    color2_read : OUT STD_LOGIC;
    color3_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    color3_empty_n : IN STD_LOGIC;
    color3_read : OUT STD_LOGIC;
    xleft_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    xleft_out_full_n : IN STD_LOGIC;
    xleft_out_write : OUT STD_LOGIC;
    ytop_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    ytop_out_full_n : IN STD_LOGIC;
    ytop_out_write : OUT STD_LOGIC;
    color1_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color1_out_full_n : IN STD_LOGIC;
    color1_out_write : OUT STD_LOGIC;
    color2_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color2_out_full_n : IN STD_LOGIC;
    color2_out_write : OUT STD_LOGIC;
    color3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    color3_out_full_n : IN STD_LOGIC;
    color3_out_write : OUT STD_LOGIC );
end;


architecture behav of Add_Rectangle is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv17_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_16_i_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal src_data_stream_3_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_3_V_blk_n : STD_LOGIC;
    signal xleft_blk_n : STD_LOGIC;
    signal xright_blk_n : STD_LOGIC;
    signal ytop_blk_n : STD_LOGIC;
    signal ydown_blk_n : STD_LOGIC;
    signal color1_blk_n : STD_LOGIC;
    signal color2_blk_n : STD_LOGIC;
    signal color3_blk_n : STD_LOGIC;
    signal xleft_out_blk_n : STD_LOGIC;
    signal ytop_out_blk_n : STD_LOGIC;
    signal color1_out_blk_n : STD_LOGIC;
    signal color2_out_blk_n : STD_LOGIC;
    signal color3_out_blk_n : STD_LOGIC;
    signal j_i_reg_492 : STD_LOGIC_VECTOR (10 downto 0);
    signal xleft_read_reg_745 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal xright_read_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal ytop_read_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal ydown_read_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal pix1_val_0_3_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_3_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_3_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_507_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_reg_781 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_i_fu_517_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_i_reg_786 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_i_fu_527_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_i_reg_791 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_i_fu_537_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_i_reg_796 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_i_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_553_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_805 : STD_LOGIC_VECTOR (9 downto 0);
    signal brmerge2_i_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_i_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_i_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_623_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sel_tmp_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_i_reg_481 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_cast_i_fu_503_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_cast_i_fu_513_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_cast_i_fu_523_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_cast_i_fu_533_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_cast106_i_fu_543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_cast_i_fu_564_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_i_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_i_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_i_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_i_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast105_i_fu_613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_i_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_cast_i_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_i_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_i_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_i_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix1_val_0_2_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_1_2_fu_717_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix1_val_2_2_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_481 <= i_reg_805;
            elsif ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_481 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_i_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_fu_617_p2 = ap_const_lv1_0))) then 
                j_i_reg_492 <= j_fu_623_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_0))) then 
                j_i_reg_492 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_0))) then
                brmerge2_i_reg_810 <= brmerge2_i_fu_583_p2;
                or_cond7_i_reg_815 <= or_cond7_i_fu_601_p2;
                sel_tmp2_reg_820 <= sel_tmp2_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_805 <= i_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                pix1_val_0_3_reg_766 <= color1_dout;
                pix1_val_1_3_reg_771 <= color2_dout;
                pix1_val_2_3_reg_776 <= color3_dout;
                tmp_2_i_reg_786 <= tmp_2_i_fu_517_p2;
                tmp_4_i_reg_791 <= tmp_4_i_fu_527_p2;
                tmp_6_i_reg_796 <= tmp_6_i_fu_537_p2;
                tmp_i_reg_781 <= tmp_i_fu_507_p2;
                xleft_read_reg_745 <= xleft_dout;
                xright_read_reg_750 <= xright_dout;
                ydown_read_reg_761 <= ydown_dout;
                ytop_read_reg_756 <= ytop_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_fu_617_p2 = ap_const_lv1_0))) then
                sel_tmp5_reg_841 <= sel_tmp5_fu_697_p2;
                sel_tmp_reg_834 <= sel_tmp_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_16_i_reg_825 <= tmp_16_i_fu_617_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n, tmp_9_i_fu_547_p2, ap_CS_fsm_state2, tmp_16_i_fu_617_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_16_i_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_16_i_fu_617_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
                ap_block_state1 <= ((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, src_data_stream_3_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, dst_data_stream_3_V_full_n, tmp_16_i_reg_825)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((dst_data_stream_3_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_2_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_1_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((dst_data_stream_0_V_full_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_3_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_2_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_1_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)) or ((src_data_stream_0_V_empty_n = ap_const_logic_0) and (tmp_16_i_reg_825 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_16_i_fu_617_p2)
    begin
        if ((tmp_16_i_fu_617_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_9_i_fu_547_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_9_i_fu_547_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_9_i_fu_547_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_i_fu_595_p2 <= (tmp_14_i_fu_573_p2 or tmp_12_i_fu_568_p2);
    brmerge2_i_fu_583_p2 <= (tmp_12_i_fu_568_p2 or tmp_10_i_fu_559_p2);
    brmerge_fu_644_p2 <= (tmp_19_i_fu_629_p2 or tmp4_fu_639_p2);
    brmerge_i_fu_589_p2 <= (tmp_15_i_fu_578_p2 or tmp_10_i_fu_559_p2);

    color1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_blk_n <= color1_empty_n;
        else 
            color1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color1_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_blk_n <= color1_out_full_n;
        else 
            color1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color1_out_din <= color1_dout;

    color1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_out_write <= ap_const_logic_1;
        else 
            color1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color1_read <= ap_const_logic_1;
        else 
            color1_read <= ap_const_logic_0;
        end if; 
    end process;


    color2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_blk_n <= color2_empty_n;
        else 
            color2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color2_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_blk_n <= color2_out_full_n;
        else 
            color2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color2_out_din <= color2_dout;

    color2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_out_write <= ap_const_logic_1;
        else 
            color2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color2_read <= ap_const_logic_1;
        else 
            color2_read <= ap_const_logic_0;
        end if; 
    end process;


    color3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_blk_n <= color3_empty_n;
        else 
            color3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    color3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, color3_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_blk_n <= color3_out_full_n;
        else 
            color3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    color3_out_din <= color3_dout;

    color3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_out_write <= ap_const_logic_1;
        else 
            color3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    color3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            color3_read <= ap_const_logic_1;
        else 
            color3_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        src_data_stream_0_V_dout when (sel_tmp5_reg_841(0) = '1') else 
        pix1_val_0_2_fu_703_p3;

    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        src_data_stream_1_V_dout when (sel_tmp5_reg_841(0) = '1') else 
        pix1_val_1_2_fu_717_p3;

    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        src_data_stream_2_V_dout when (sel_tmp5_reg_841(0) = '1') else 
        pix1_val_2_2_fu_731_p3;

    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_3_V_blk_n_assign_proc : process(dst_data_stream_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_3_V_blk_n <= dst_data_stream_3_V_full_n;
        else 
            dst_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_3_V_din <= src_data_stream_3_V_dout;

    dst_data_stream_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            dst_data_stream_3_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_cast106_i_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_481),16));
    i_fu_553_p2 <= std_logic_vector(unsigned(i_i_reg_481) + unsigned(ap_const_lv10_1));
    j_cast105_i_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_492),16));
    j_fu_623_p2 <= std_logic_vector(unsigned(j_i_reg_492) + unsigned(ap_const_lv11_1));
    or_cond4_i_fu_659_p2 <= (tmp_22_i_fu_654_p2 or tmp_19_i_fu_629_p2);
    or_cond6_i_fu_675_p2 <= (tmp_24_i_fu_670_p2 or tmp_23_i_fu_665_p2);
    or_cond7_i_fu_601_p2 <= (brmerge_i_fu_589_p2 and brmerge1_i_fu_595_p2);
    pix1_val_0_2_fu_703_p3 <= 
        src_data_stream_0_V_dout when (sel_tmp_reg_834(0) = '1') else 
        pix1_val_0_3_reg_766;
    pix1_val_1_2_fu_717_p3 <= 
        src_data_stream_1_V_dout when (sel_tmp_reg_834(0) = '1') else 
        pix1_val_1_3_reg_771;
    pix1_val_2_2_fu_731_p3 <= 
        src_data_stream_2_V_dout when (sel_tmp_reg_834(0) = '1') else 
        pix1_val_2_3_reg_776;
    sel_tmp2_fu_607_p2 <= (brmerge2_i_fu_583_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_697_p2 <= (tmp6_fu_691_p2 and tmp5_fu_686_p2);
    sel_tmp_fu_681_p2 <= (brmerge_fu_644_p2 and brmerge2_i_reg_810);

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_3_V_blk_n_assign_proc : process(src_data_stream_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_16_i_reg_825)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_3_V_blk_n <= src_data_stream_3_V_empty_n;
        else 
            src_data_stream_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_16_i_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_16_i_reg_825 = ap_const_lv1_0))) then 
            src_data_stream_3_V_read <= ap_const_logic_1;
        else 
            src_data_stream_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_fu_639_p2 <= (tmp_20_i_fu_634_p2 or or_cond7_i_reg_815);
    tmp5_fu_686_p2 <= (sel_tmp2_reg_820 and or_cond4_i_fu_659_p2);
    tmp6_fu_691_p2 <= (or_cond6_i_fu_675_p2 and brmerge_fu_644_p2);
    tmp_10_i_fu_559_p2 <= "1" when (unsigned(i_cast106_i_fu_543_p1) < unsigned(ytop_read_reg_756)) else "0";
    tmp_11_cast_i_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_481),17));
    tmp_12_i_fu_568_p2 <= "1" when (unsigned(tmp_11_cast_i_fu_564_p1) > unsigned(tmp_i_reg_781)) else "0";
    tmp_14_i_fu_573_p2 <= "1" when (unsigned(i_cast106_i_fu_543_p1) < unsigned(ydown_read_reg_761)) else "0";
    tmp_15_i_fu_578_p2 <= "1" when (unsigned(tmp_11_cast_i_fu_564_p1) > unsigned(tmp_6_i_reg_796)) else "0";
    tmp_16_i_fu_617_p2 <= "1" when (j_i_reg_492 = ap_const_lv11_500) else "0";
    tmp_19_i_fu_629_p2 <= "1" when (unsigned(j_cast105_i_fu_613_p1) < unsigned(xleft_read_reg_745)) else "0";
    tmp_1_cast_i_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xright_dout),17));
    tmp_20_i_fu_634_p2 <= "1" when (unsigned(j_cast105_i_fu_613_p1) > unsigned(xright_read_reg_750)) else "0";
    tmp_21_cast_i_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_492),17));
    tmp_22_i_fu_654_p2 <= "1" when (unsigned(tmp_21_cast_i_fu_650_p1) > unsigned(tmp_4_i_reg_791)) else "0";
    tmp_23_i_fu_665_p2 <= "1" when (unsigned(j_cast105_i_fu_613_p1) < unsigned(xright_read_reg_750)) else "0";
    tmp_24_i_fu_670_p2 <= "1" when (unsigned(tmp_21_cast_i_fu_650_p1) > unsigned(tmp_2_i_reg_786)) else "0";
    tmp_2_i_fu_517_p2 <= std_logic_vector(unsigned(tmp_1_cast_i_fu_513_p1) + unsigned(ap_const_lv17_4));
    tmp_3_cast_i_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xleft_dout),17));
    tmp_4_i_fu_527_p2 <= std_logic_vector(unsigned(tmp_3_cast_i_fu_523_p1) + unsigned(ap_const_lv17_4));
    tmp_5_cast_i_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ytop_dout),17));
    tmp_6_i_fu_537_p2 <= std_logic_vector(unsigned(tmp_5_cast_i_fu_533_p1) + unsigned(ap_const_lv17_4));
    tmp_9_i_fu_547_p2 <= "1" when (i_i_reg_481 = ap_const_lv10_2D0) else "0";
    tmp_cast_i_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ydown_dout),17));
    tmp_i_fu_507_p2 <= std_logic_vector(unsigned(tmp_cast_i_fu_503_p1) + unsigned(ap_const_lv17_4));

    xleft_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_blk_n <= xleft_empty_n;
        else 
            xleft_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xleft_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_out_blk_n <= xleft_out_full_n;
        else 
            xleft_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xleft_out_din <= xleft_dout;

    xleft_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_out_write <= ap_const_logic_1;
        else 
            xleft_out_write <= ap_const_logic_0;
        end if; 
    end process;


    xleft_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_read <= ap_const_logic_1;
        else 
            xleft_read <= ap_const_logic_0;
        end if; 
    end process;


    xright_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xright_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_blk_n <= xright_empty_n;
        else 
            xright_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xright_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_read <= ap_const_logic_1;
        else 
            xright_read <= ap_const_logic_0;
        end if; 
    end process;


    ydown_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ydown_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_blk_n <= ydown_empty_n;
        else 
            ydown_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ydown_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_read <= ap_const_logic_1;
        else 
            ydown_read <= ap_const_logic_0;
        end if; 
    end process;


    ytop_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_blk_n <= ytop_empty_n;
        else 
            ytop_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ytop_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ytop_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_blk_n <= ytop_out_full_n;
        else 
            ytop_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ytop_out_din <= ytop_dout;

    ytop_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_out_write <= ap_const_logic_1;
        else 
            ytop_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ytop_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, color1_empty_n, color2_empty_n, color3_empty_n, xleft_out_full_n, ytop_out_full_n, color1_out_full_n, color2_out_full_n, color3_out_full_n)
    begin
        if ((not(((color1_out_full_n = ap_const_logic_0) or (ytop_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (xleft_out_full_n = ap_const_logic_0) or (color3_empty_n = ap_const_logic_0) or (color2_empty_n = ap_const_logic_0) or (color1_empty_n = ap_const_logic_0) or (ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (color3_out_full_n = ap_const_logic_0) or (color2_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_read <= ap_const_logic_1;
        else 
            ytop_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
